// <auto-generated />
using System;
using DayCare.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DayCare.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190805073541_AdvanceFeesPaymentDetailsAddedTable")]
    partial class AdvanceFeesPaymentDetailsAddedTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DayCare.Entity.Agency.ActiveUsersForChat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ChatPrivateMessageDetailsID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.Property<string>("connectionID");

                    b.Property<long>("userID");

                    b.HasKey("Id");

                    b.ToTable("ActiveUsersForChat");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.AttendenceStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AttendenceStatusID");

                    b.Property<long>("AgencyID");

                    b.Property<string>("AttendenceStatusName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("AttendenceStatus");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.ChatPrivateMessageDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ChatPrivateMessageDetailsID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<long>("FromUserId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRead");

                    b.Property<string>("Message")
                        .HasMaxLength(2000);

                    b.Property<long>("ToUserId");

                    b.Property<string>("Token");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("ChatPrivateMessageDetails");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.ClassAssignmentLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClassAssignmentLogID");

                    b.Property<long>("AgencyID");

                    b.Property<DateTime>("ClassEndTime");

                    b.Property<DateTime>("ClassEnrollEndDate");

                    b.Property<DateTime>("ClassEnrollStartDate");

                    b.Property<DateTime>("ClassStartTime");

                    b.Property<long>("ClassesID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSwapped");

                    b.Property<long>("TeacherID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("ClassAssignmentLog");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.ClassAttendence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClassAttendenceID");

                    b.Property<long>("AgencyID");

                    b.Property<long>("ApprovedDropedById");

                    b.Property<long>("ApprovedPickupById");

                    b.Property<DateTime>("AttendanceDate");

                    b.Property<long>("AttendenceStatusID");

                    b.Property<DateTime>("CheckInTime");

                    b.Property<DateTime>("CheckOutTime");

                    b.Property<DateTime>("Checkin");

                    b.Property<DateTime>("Checkout");

                    b.Property<long>("ClassesID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("DisableOnLeave")
                        .HasMaxLength(100);

                    b.Property<long>("DropedById");

                    b.Property<long>("DropedByOtherId");

                    b.Property<string>("DropedByOtherNames")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("OnLeave");

                    b.Property<string>("OnLeaveComment")
                        .HasMaxLength(100);

                    b.Property<long>("PickupById");

                    b.Property<long>("PickupByOtherId");

                    b.Property<string>("PickupByOtherName")
                        .HasMaxLength(100);

                    b.Property<long>("ReasonId");

                    b.Property<long>("StudentID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("ClassAttendence");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.ClassCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CategoryID");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<long>("FromAge");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("ToAge");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("ClassCategory");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.ClassEnrollment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClassEnrollmentID");

                    b.Property<long>("AgencyID");

                    b.Property<DateTime?>("ClassEnrollEndDate");

                    b.Property<DateTime>("ClassEnrollStartDate");

                    b.Property<long>("ClassesID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<long>("EnrollmentStatus");

                    b.Property<long>("FeeTypeId");

                    b.Property<long>("Fees");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("StudentID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("ClassEnrollments");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.Classes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClassesID");

                    b.Property<DateTime>("AgeCutOffDate");

                    b.Property<long>("AgencyID");

                    b.Property<long>("CategoryId");

                    b.Property<DateTime>("ClassEndDate");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("ClassStartDate");

                    b.Property<long>("ClassStatusId");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<DateTime>("EndTime");

                    b.Property<long>("EnrollCapacity");

                    b.Property<long>("FeeTypeId");

                    b.Property<long>("Fees");

                    b.Property<bool>("Fri");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("LocationId");

                    b.Property<long>("MaxAgeFrom");

                    b.Property<long>("MaxAgeTo");

                    b.Property<long>("MinAgeFrom");

                    b.Property<long>("MinAgeTo");

                    b.Property<bool>("Mon");

                    b.Property<bool>("OnGoing");

                    b.Property<DateTime>("RegistrationStartDate");

                    b.Property<long>("RoomId");

                    b.Property<bool>("Sat");

                    b.Property<DateTime>("StartTime");

                    b.Property<bool>("Sun");

                    b.Property<bool>("Thu");

                    b.Property<bool>("Tue");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.Property<bool>("Wed");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.DailyStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClassAttendenceID");

                    b.Property<long>("AgencyID");

                    b.Property<long>("ApprovedDropedById");

                    b.Property<long>("ApprovedPickupById");

                    b.Property<DateTime>("AttendanceDate");

                    b.Property<long>("AttendenceStatusID");

                    b.Property<DateTime>("Checkin");

                    b.Property<DateTime>("Checkout");

                    b.Property<long>("ClassesID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<DateTime>("Date");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("DisableOnLeave")
                        .HasMaxLength(100);

                    b.Property<long>("DropedById");

                    b.Property<long>("DropedByOtherId");

                    b.Property<string>("Imagefolder")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("OnLeave");

                    b.Property<string>("OnLeaveComment")
                        .HasMaxLength(100);

                    b.Property<long>("PickupById");

                    b.Property<long>("PickupByOtherId");

                    b.Property<string>("PickupByOtherName")
                        .HasMaxLength(100);

                    b.Property<long>("ReasonId");

                    b.Property<long>("StudentID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.Property<string>("VedioFolder")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("DailyStatus");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.EventPlanner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EventPlannerID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("EndTime");

                    b.Property<DateTime?>("EndsOn");

                    b.Property<bool>("Fri");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("Mon");

                    b.Property<long>("PlannerRepeatTypeID");

                    b.Property<bool>("Sat");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("StartTime");

                    b.Property<bool>("Sun");

                    b.Property<bool>("Thu");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<bool>("Tue");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.Property<bool>("Wed");

                    b.HasKey("Id");

                    b.ToTable("EventPlanner");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.Incident", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IncidentID");

                    b.Property<string>("ActionTaken")
                        .HasMaxLength(1000);

                    b.Property<long>("AgencyID");

                    b.Property<long>("ClassesID");

                    b.Property<string>("ContextChild");

                    b.Property<string>("ContextEnviroment");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<long>("FirstAidAdministeredID");

                    b.Property<DateTime>("IncidentDate");

                    b.Property<long>("IncidentPriortyTypeID");

                    b.Property<DateTime>("IncidentTime");

                    b.Property<bool>("IsAcknowledge");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDoctorRequired");

                    b.Property<bool>("IsEmergency");

                    b.Property<bool>("IsGeneric");

                    b.Property<long>("NatureOfInjuryID");

                    b.Property<string>("ParentComment")
                        .HasMaxLength(1000);

                    b.Property<string>("ParentInformedBy")
                        .HasMaxLength(1000);

                    b.Property<string>("PartOfBody");

                    b.Property<string>("PlaceOfIncident")
                        .HasMaxLength(1000);

                    b.Property<long>("StudentID");

                    b.Property<long>("TeacherID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.Property<bool>("WasParentInformed");

                    b.HasKey("Id");

                    b.ToTable("Incident");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.IncidentInvolvment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IncidentInvolvmentID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<long>("IncidentID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("StudentID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("IncidentInvolvment");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.InvoiceDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InvoiceDetailsID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<decimal>("DiscountAmount");

                    b.Property<decimal>("DueAmount");

                    b.Property<decimal>("InvoiceAmount");

                    b.Property<DateTime?>("InvoiceDate");

                    b.Property<DateTime?>("InvoiceFromDate");

                    b.Property<string>("InvoiceNo");

                    b.Property<DateTime?>("InvoiceToDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInvoicePaid");

                    b.Property<long>("ParentID");

                    b.Property<long>("StudentID");

                    b.Property<decimal>("TotalAmount");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.InvoiceItemDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InvoiceItemDetailsID");

                    b.Property<long>("AgencyID");

                    b.Property<decimal>("ClassFees");

                    b.Property<long>("ClassesID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<long>("InvoiceDetailsID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("ParentID");

                    b.Property<long>("StudentID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("InvoiceItemDetails");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.InvolvedEventClasses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InvolvedEventClassesID");

                    b.Property<long>("AgencyID");

                    b.Property<long>("ClassesID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<long>("EventPlannerID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("InvolvedEventClasses");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.InvolvedMealClasses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InvolvedMealClassesID");

                    b.Property<long>("AgencyID");

                    b.Property<long>("ClassesID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("MealPlannerID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("InvolvedMealClasses");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.InvolvedMealFoodItems", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InvolvedMealFoodItemsID");

                    b.Property<long>("AgencyID");

                    b.Property<long>("Amount");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<long>("FoodTypeID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("MealPlannerID");

                    b.Property<long>("MeasureQuantityTypeID");

                    b.Property<long>("MeasureUnitTypeID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.Property<long>("quantity");

                    b.HasKey("Id");

                    b.ToTable("InvolvedMealFoodItems");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.KioskeStudentSignInDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SignInID");

                    b.Property<long>("AgencyID");

                    b.Property<DateTime?>("BreakInDateTime");

                    b.Property<DateTime?>("BreakOutDateTime");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<DateTime?>("DropInDateTime");

                    b.Property<DateTime?>("DropOutDateTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsBreakIn");

                    b.Property<bool>("IsBreakOut");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDropIn");

                    b.Property<bool>("IsDropOut");

                    b.Property<long>("ParentID");

                    b.Property<long>("StudentID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("KioskeStudentSignInDetails");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.MealPlanner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MealPlannerID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("EndTime");

                    b.Property<DateTime>("EndsOn");

                    b.Property<bool>("Fri");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("MealTypeID");

                    b.Property<bool>("Mon");

                    b.Property<long>("PlannerRepeatTypeID");

                    b.Property<bool>("Sat");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("StartTime");

                    b.Property<bool>("Sun");

                    b.Property<bool>("Thu");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<bool>("Tue");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.Property<bool>("Wed");

                    b.HasKey("Id");

                    b.ToTable("MealPlanner");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.PayementDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PaymentDetailsID");

                    b.Property<long>("AgencyID");

                    b.Property<decimal>("AmoutPaid");

                    b.Property<decimal>("BalanceAmount");

                    b.Property<long>("CardNo");

                    b.Property<long>("ChequeNo");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<decimal>("DiscountAmount");

                    b.Property<long>("InvoiceDetailsID");

                    b.Property<string>("InvoiceNo");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsOffline");

                    b.Property<long>("ParentID");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<DateTime?>("PaymentFromDate");

                    b.Property<DateTime?>("PaymentToDate");

                    b.Property<string>("PaymentType");

                    b.Property<long>("StripeDetailsID");

                    b.Property<long>("StudentID");

                    b.Property<decimal>("TotalAmount");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("PayementDetails");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.PricingPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PlanID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("Frequency")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("NumberofUsers");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<decimal>("PlanPrice");

                    b.Property<string>("Remark")
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("PricingPlan");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.StripeDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StripeDetailsID");

                    b.Property<string>("AccessToken");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleteRequested");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<bool>("LiveMode");

                    b.Property<string>("RefreshToken");

                    b.Property<string>("Scope");

                    b.Property<string>("StripePublishableKey");

                    b.Property<string>("StripeUserId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.ToTable("StripeDetails");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.StudentBreakLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentBreakLogID");

                    b.Property<long>("AgencyID");

                    b.Property<long>("ApprovedDropedById");

                    b.Property<long>("ApprovedPickupById");

                    b.Property<DateTime>("AttendanceDate");

                    b.Property<long>("AttendenceStatusID");

                    b.Property<DateTime>("BreakInTime");

                    b.Property<DateTime>("BreakOutTime");

                    b.Property<string>("BreakReason")
                        .HasMaxLength(100);

                    b.Property<long>("BreakStatusId");

                    b.Property<long>("ClassAttendenceID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<long>("DropedById");

                    b.Property<long>("DropedByOtherId");

                    b.Property<string>("DropedByOtherNames")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("PickupById");

                    b.Property<long>("PickupByOtherId");

                    b.Property<string>("PickupByOtherName")
                        .HasMaxLength(100);

                    b.Property<long>("StudentID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("StudentBreakLog");
                });

            modelBuilder.Entity("DayCare.Entity.Agency.SubscriptionDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SubscriptionDetailsID");

                    b.Property<long>("AgencyID");

                    b.Property<decimal>("Amount");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<string>("CustomerId");

                    b.Property<string>("CustomerName");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("Interval");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsOffline");

                    b.Property<long>("PlanID");

                    b.Property<string>("PlanName");

                    b.Property<string>("ProductId");

                    b.Property<string>("ProductName");

                    b.Property<string>("StripePlanId");

                    b.Property<string>("StripeSubscriptionId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.Property<DateTime>("ValidFromDate");

                    b.Property<DateTime>("ValidToDate");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionDetails");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.AccountLedger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccountLedgerID");

                    b.Property<long>("AccountID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<decimal>("CreditAmount");

                    b.Property<long>("CustomerID");

                    b.Property<decimal>("DebitAmount");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("DrCr");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("PaymentDetailsID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.HasIndex("AgencyID");

                    b.HasIndex("PaymentDetailsID");

                    b.ToTable("AccountLedger");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.ActivityType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ActivityTypeID");

                    b.Property<string>("ActivityTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("ActivityType");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.AdvanceFeePaymentDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PaymentDetailsID");

                    b.Property<long>("AgencyID");

                    b.Property<decimal>("BalanceAmount");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<decimal>("CreditAdvanceAmount");

                    b.Property<decimal>("DebitAdvanceAmount");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<long>("InvoiceDetailsID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAdvanceCreditAmount");

                    b.Property<bool>("IsAdvanceDebitAmount");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsOffline");

                    b.Property<long>("ParentID");

                    b.Property<long>("StudentID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.HasIndex("AgencyID");

                    b.HasIndex("InvoiceDetailsID");

                    b.ToTable("AdvanceFeePaymentDetails");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.Agency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AgencyID");

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<string>("AgencyName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("CityId");

                    b.Property<string>("ContactPersonFirstName")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPersonLastName")
                        .HasMaxLength(100);

                    b.Property<long>("CountryId");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long>("CurrentSubscriptionPlanId");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("EmailId");

                    b.Property<long>("GenderID");

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsExistingAccount");

                    b.Property<bool>("IsLoggedFirstTime");

                    b.Property<bool>("IsTrial");

                    b.Property<bool>("IsTrialMailSent");

                    b.Property<long>("Mobile");

                    b.Property<string>("OwnerFirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OwnerLastName")
                        .HasMaxLength(100);

                    b.Property<long>("PayPalSubscriptionId");

                    b.Property<long>("PayPalUserId");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(100);

                    b.Property<string>("Profession");

                    b.Property<long>("StateId");

                    b.Property<long>("Status");

                    b.Property<DateTime>("SubscriptionValidUpto");

                    b.Property<string>("TimeZoneSpecification")
                        .HasMaxLength(100);

                    b.Property<DateTime>("TrialEnd");

                    b.Property<DateTime>("TrialStart");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.Property<long>("UserID");

                    b.HasKey("Id");

                    b.ToTable("Agency");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.AllergyName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AllergyNameID");

                    b.Property<long>("AgencyID");

                    b.Property<long>("AllergyTypeID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameOfAllergy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("AllergyName");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.AllergyReactionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AllergyReactionTypeID");

                    b.Property<long>("AgencyID");

                    b.Property<string>("AllergyReactionTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("AllergyTypeID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("AllergyReactionType");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.AllergyType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AllergyTypeID");

                    b.Property<long>("AgencyID");

                    b.Property<string>("AllergyTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("AllergyType");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.BreakTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BreakTypesID");

                    b.Property<long>("AgencyID");

                    b.Property<string>("BreakTypesName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("BreakTypes");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.CalculatedFeeDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CalculatedFeeDetailsID");

                    b.Property<long>("AgencyID");

                    b.Property<decimal>("Amount");

                    b.Property<string>("CalculatedFeeDate");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("PerDayFeeCalculationID");

                    b.Property<long>("StudentID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.HasIndex("AgencyID");

                    b.HasIndex("PerDayFeeCalculationID");

                    b.ToTable("CalculatedFeeDetails");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.CalculatedFees", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PerDayFeeCalculationID");

                    b.Property<long>("AgencyID");

                    b.Property<long>("ClassID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<decimal>("DiscountAmount");

                    b.Property<string>("DiscountDetails");

                    b.Property<DateTime>("FromDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInvoiceGenrated");

                    b.Property<long>("ParentID");

                    b.Property<long>("StudentID");

                    b.Property<DateTime>("ToDate");

                    b.Property<decimal>("TotalCalculatedAmount");

                    b.Property<decimal>("TotalPerDayFee");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.HasIndex("AgencyID");

                    b.ToTable("CalculatedFees");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CityID");

                    b.Property<long>("AgencyID");

                    b.Property<string>("CityCode")
                        .HasMaxLength(100);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NumCode")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneCode")
                        .HasMaxLength(100);

                    b.Property<long>("StateID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.ClassStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClassStatusID");

                    b.Property<long>("AgencyID");

                    b.Property<string>("ClassStatusName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("ClassStatus");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CountryID");

                    b.Property<long>("AgencyID");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(100);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NumCode")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneCode")
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.DigitalDirectorMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DDMasterID");

                    b.Property<long>("ActivityTypeID");

                    b.Property<long>("AgencyID");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<long>("Interval");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.HasIndex("AgencyID");

                    b.ToTable("DigitalDirectorMaster");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.DosageQuantity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DosageQuantityID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("DosageQuantityName")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("DosageQuantity");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.DoseRepeat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DoseRepeatID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("DoseRepeatName")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("DoseRepeat");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.ExtraFeeChargeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ExtraFeeChargeMasterID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("ExtraChargeName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.HasIndex("AgencyID");

                    b.ToTable("ExtraFeeChargeMaster");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.ExtraFeesDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ExtraFeesDetailsID");

                    b.Property<long>("AgencyID");

                    b.Property<long>("CalculatedFeesID");

                    b.Property<decimal>("ChargeAmount");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("DiscountDetails");

                    b.Property<long>("ExtraFeeChargeMasterID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("PaymentDetailsID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.HasIndex("AgencyID");

                    b.HasIndex("CalculatedFeesID");

                    b.HasIndex("ExtraFeeChargeMasterID");

                    b.ToTable("ExtraFeesDetails");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.FeePaymentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FeePaymentTypeID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("FeePaymentTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("FeePaymentType");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.FoodConsumtion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FoodConsumtionID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("FoodConsumtionName")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("FoodConsumtion");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.FoodType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FoodTypeID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("FoodTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("FoodType");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GenderID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.Immunization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ImmunizationID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("ImmunizationDescription")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("Immunization");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.IncidentPriortyType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IncidentPriortyType");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("IncidentPriortyTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("IncidentPriortyType");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.LeaveReasonType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LeaveReasonTypeID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LeaveReasonTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("LeaveReasonType");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.MealItemMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MealItemMasterID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MealItemMasterName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("MealItemMaster");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.MealServeSize", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MealServeSizeID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("Unit");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("MealServeSize");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.MealType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MealTypeID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MealTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("MealType");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.MeasureQuantityType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MeasureQuantityTypeID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MeasureQuantityTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("MeasureQuantityType");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.MeasureUnitType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MeasureUnitTypeID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MeasureUnitTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("MeasureUnitType");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.MoodType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MoodTypeID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MoodTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("MoodType");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.NatureOfInjury", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NatureOfInjuryID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NatureOfInjuryName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("NatureOfInjury");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.PerDayFeeCalculation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PerDayFeeCalculationID");

                    b.Property<long>("AgencyID");

                    b.Property<long>("ClassID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<DateTime>("FeeDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPaid");

                    b.Property<decimal>("OneDayFee");

                    b.Property<long>("ParentID");

                    b.Property<long>("StudentID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.HasIndex("AgencyID");

                    b.ToTable("PerDayFeeCalculation");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.PlannerRepeatType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PlannerRepeatTypeID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PlannerRepeatTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("PlannerRepeatType");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.PositionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PositionTypeID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PositionTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("PositionType");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.RelationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RelationTypeID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("RelationTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("RelationType");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.ScheduleRepeatType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ScheduleRepeatTypeID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ScheduleRepeatTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("ScheduleRepeatType");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.SecurityQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SecurityQuestionID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("SecurityQuestionDetail")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("SecurityQuestion");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StateID");

                    b.Property<long>("AgencyID");

                    b.Property<long>("CountryID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NumCode")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneCode")
                        .HasMaxLength(100);

                    b.Property<string>("StateCode")
                        .HasMaxLength(100);

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.StudentAgeCategories", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentAgeCategoriesID");

                    b.Property<bool>("AgeInMonths");

                    b.Property<string>("AgeNameForMonth")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("AgeNameForYear")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<long>("FromAge");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("ToAge");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("StudentAgeCategories");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.StudentFeesDiscount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentFeesDiscountID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<decimal>("DiscountAmount");

                    b.Property<string>("DiscountDescription");

                    b.Property<DateTime>("FromDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("StudentID");

                    b.Property<DateTime>("ToDate");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.HasIndex("AgencyID");

                    b.ToTable("StudentFeesDiscount");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.SubActivityType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SubActivityTypeID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("SubActivityLabel")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SubActivityText")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("SubActivityType");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.TeacherAttendenceStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TeacherAttendenceStatusID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("TeacherAttendenceStatusName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("TeacherAttendenceStatus");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.TeacherStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TeacherStatusID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("TeacherStatusName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("TeacherStatus");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.TransactionDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TransactionDetailsID");

                    b.Property<long>("AgencyID");

                    b.Property<decimal>("Amount");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("InvoiceFromDate");

                    b.Property<string>("InvoiceNo");

                    b.Property<DateTime?>("InvoiceToDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("TransactionTypeID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.HasIndex("AgencyID");

                    b.HasIndex("TransactionTypeID");

                    b.ToTable("TransactionDetails");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.TransactionMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TransactionMasterID");

                    b.Property<string>("AccountHolderName");

                    b.Property<long>("AccountNumber");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("IFSC");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDefaultAccount");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("OpeningBalance");

                    b.Property<long>("TransactionTypeID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.HasIndex("AgencyID");

                    b.HasIndex("TransactionTypeID");

                    b.ToTable("TransactionMaster");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.TransactionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TransactionTypeID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("TransactionTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("TransactionType");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.TransportationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TransportationTypeID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("TransportationTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("TransportationType");
                });

            modelBuilder.Entity("DayCare.Entity.Parent.Guardian", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GuardianID");

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<long>("AgencyID");

                    b.Property<long>("CityId");

                    b.Property<long>("CountryId");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("EmailId")
                        .HasMaxLength(100);

                    b.Property<long>("FailedLoginAttemptCount");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("GuardianName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAuthorizedToPickup");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<long>("Mobile");

                    b.Property<long>("PinNumber");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(100);

                    b.Property<string>("ReasonNotToAllow")
                        .HasMaxLength(100);

                    b.Property<long>("RelationTypeId");

                    b.Property<long>("StateId");

                    b.Property<long>("StudentID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("Guardian");
                });

            modelBuilder.Entity("DayCare.Entity.Parent.Parent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ParentID");

                    b.Property<long>("AddedByID");

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<long>("AgencyID");

                    b.Property<string>("Apartment")
                        .HasMaxLength(100);

                    b.Property<long>("CityId");

                    b.Property<long>("CountryId");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("EmailId")
                        .HasMaxLength(100);

                    b.Property<string>("EmployerName");

                    b.Property<long>("EmployerNumber");

                    b.Property<long>("FailedLoginAttemptCount");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("GenderID");

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAuthorizedToPickup");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsGaurdian");

                    b.Property<bool>("IsParent");

                    b.Property<bool>("IsSecondaryParent");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<long>("Mobile");

                    b.Property<string>("ParentName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("PinNumber");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(100);

                    b.Property<string>("Profession")
                        .HasMaxLength(100);

                    b.Property<string>("ReasonNotToAllow")
                        .HasMaxLength(100);

                    b.Property<long>("RelationTypeId");

                    b.Property<long>("SecurityKey");

                    b.Property<string>("SecurityQuestionAnswer")
                        .HasMaxLength(100);

                    b.Property<long>("SecurityQuestionId");

                    b.Property<long>("StateId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.Property<long>("UserID");

                    b.HasKey("Id");

                    b.ToTable("Parent");
                });

            modelBuilder.Entity("DayCare.Entity.Parent.ParentStudentMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MappingID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsGaurdian");

                    b.Property<bool>("IsParent");

                    b.Property<bool>("IsSecondaryParent");

                    b.Property<long>("ParentID");

                    b.Property<long>("StudentID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("MappingParentStudent");
                });

            modelBuilder.Entity("DayCare.Entity.PostActivity.PostActivities", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PostActivitiesID");

                    b.Property<long>("AgencyID");

                    b.Property<long>("ClassesID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublic");

                    b.Property<string>("PostDescription")
                        .HasMaxLength(1000);

                    b.Property<string>("PostTitle")
                        .HasMaxLength(100);

                    b.Property<DateTime>("PostedDate");

                    b.Property<long>("StudentID");

                    b.Property<long>("TeacherID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("PostActivities");
                });

            modelBuilder.Entity("DayCare.Entity.PostActivity.PostActivityImages", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PostActivityImagesID");

                    b.Property<long>("AgencyID");

                    b.Property<long>("ClassesID");

                    b.Property<string>("Comment");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("ImageServerPath");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("LikeCount");

                    b.Property<long>("LoveCount");

                    b.Property<long>("PostActivitiesID");

                    b.Property<long>("StudentID");

                    b.Property<long>("ThumbsDownCount");

                    b.Property<long>("ThumbsUpCount");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("PostActivityImages");
                });

            modelBuilder.Entity("DayCare.Entity.PostActivity.PostActivityVideos", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PostActivityVideosID");

                    b.Property<long>("AgencyID");

                    b.Property<long>("ClassesID");

                    b.Property<string>("Comment");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("LikeCount");

                    b.Property<long>("LoveCount");

                    b.Property<long>("PostActivitiesID");

                    b.Property<long>("StudentID");

                    b.Property<long>("ThumbsDownCount");

                    b.Property<long>("ThumbsUpCount");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.Property<string>("VedioServerPath");

                    b.HasKey("Id");

                    b.ToTable("PostActivityVideos");
                });

            modelBuilder.Entity("DayCare.Entity.PostActivity.PostImageslikeDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PostImageslikeDetailsID");

                    b.Property<long>("AgencyID");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("LikeCount");

                    b.Property<long>("PostActivitiesID");

                    b.Property<long>("PostActivityImagesID");

                    b.Property<long>("StudentID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("PostImageslikeDetails");
                });

            modelBuilder.Entity("DayCare.Entity.PostActivity.PostVideolikeDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PostVideolikeDetailsID");

                    b.Property<long>("AgencyID");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("LikeCount");

                    b.Property<long>("PostActivitiesID");

                    b.Property<long>("PostActivityVideosID");

                    b.Property<long>("StudentID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("PostVideolikeDetails");
                });

            modelBuilder.Entity("DayCare.Entity.Student.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentID");

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<long>("AgencyID");

                    b.Property<string>("ChildsAddress")
                        .HasMaxLength(100);

                    b.Property<long>("ChildsContactNumber");

                    b.Property<long>("CityId");

                    b.Property<long>("CountryId");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<long>("FeePaymentTypeID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("GenderID");

                    b.Property<string>("ImagePath");

                    b.Property<string>("InsuranceCarrier")
                        .HasMaxLength(100);

                    b.Property<string>("InsurancePolicyNumber")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<long>("ParentID");

                    b.Property<long>("PhysicianContactNumber");

                    b.Property<string>("PhysicianName")
                        .HasMaxLength(100);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(100);

                    b.Property<string>("PreferredHospital")
                        .HasMaxLength(100);

                    b.Property<DateTime>("RegisteredDate");

                    b.Property<string>("SchoolName")
                        .HasMaxLength(100);

                    b.Property<long>("StateId");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("TransportationID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("DayCare.Entity.Student.StudentAcitivityNap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentAcitivityNapID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NapNote")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("SleptAtTime");

                    b.Property<long>("StudentActivitiesID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.Property<DateTime>("WorkUpTime");

                    b.HasKey("Id");

                    b.ToTable("StudentAcitivityNap");
                });

            modelBuilder.Entity("DayCare.Entity.Student.StudentActivities", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentActivitiesID");

                    b.Property<DateTime>("ActivityRegisterDate");

                    b.Property<long>("ActivityTypeID");

                    b.Property<long>("AgencyID");

                    b.Property<long>("ClassesID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("StudentID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("StudentActivities");
                });

            modelBuilder.Entity("DayCare.Entity.Student.StudentActivityDiaper", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentActivityDiaperID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<DateTime>("DiaperChangeTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("StudentActivitiesID");

                    b.Property<string>("StudentActivityDiaperNote")
                        .HasMaxLength(1000);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("StudentActivityDiaper");
                });

            modelBuilder.Entity("DayCare.Entity.Student.StudentActivityMeal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentActivityMealID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MealComment")
                        .HasMaxLength(1000);

                    b.Property<long>("MealPlannerID");

                    b.Property<string>("OtherThanPlanMeal")
                        .HasMaxLength(100);

                    b.Property<string>("OtherThanPlanMealComment")
                        .HasMaxLength(1000);

                    b.Property<long>("StudentActivitiesID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("StudentActivityMeal");
                });

            modelBuilder.Entity("DayCare.Entity.Student.StudentActivityMealFoodItems", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentActivityMealFoodItemsID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<long>("FoodConsumtionID");

                    b.Property<long>("FoodTypeID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MilkConsumptionQuantity")
                        .HasMaxLength(100);

                    b.Property<long>("StudentActivityMealID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("StudentActivityMealFoodItems");
                });

            modelBuilder.Entity("DayCare.Entity.Student.StudentActivityMedication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentActivityMedicationID");

                    b.Property<long>("AcknowledgeParentID");

                    b.Property<long>("AcknowledgeTeacherID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<long>("DosageQuantityID");

                    b.Property<long>("DoseRepeatID");

                    b.Property<string>("HowTaken")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMedicationDoneToday");

                    b.Property<DateTime>("MedicationDoneDate");

                    b.Property<string>("RecordedTemparture");

                    b.Property<long>("StudentActivitiesID");

                    b.Property<string>("StudentHealthDescription")
                        .HasMaxLength(1000);

                    b.Property<long>("StudentMedicationID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.Property<bool>("isParentAcknowledge");

                    b.Property<bool>("isTeacherAcknowledge");

                    b.HasKey("Id");

                    b.ToTable("StudentActivityMedication");
                });

            modelBuilder.Entity("DayCare.Entity.Student.StudentActivityMood", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentActivityMoodID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("MoodTypeID");

                    b.Property<long>("StudentActivitiesID");

                    b.Property<string>("StudentMoodDescription")
                        .HasMaxLength(1000);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("StudentActivityMood");
                });

            modelBuilder.Entity("DayCare.Entity.Student.StudentActivityNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentActivityNoteID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NoteDescription")
                        .HasMaxLength(1000);

                    b.Property<long>("StudentActivitiesID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("StudentActivityNote");
                });

            modelBuilder.Entity("DayCare.Entity.Student.StudentAllergies", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentAllergiesID");

                    b.Property<long>("AgencyID");

                    b.Property<string>("AllergyComment")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long>("AllergyNameID");

                    b.Property<long>("AllergyReactionTypeID");

                    b.Property<long>("AllergyTypeID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<DateTime?>("FirstAllergyObservation");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastAllergyObservation");

                    b.Property<long>("StudentID");

                    b.Property<string>("Treatment")
                        .HasMaxLength(1000);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("StudentAllergies");
                });

            modelBuilder.Entity("DayCare.Entity.Student.StudentDisabilities", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentDisabilitiesID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("StudentID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("StudentDisabilities");
                });

            modelBuilder.Entity("DayCare.Entity.Student.StudentImmunization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentImmunizationID");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(500);

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<DateTime>("DateReceived");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<long>("ImmunizationID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("OtherImmunization")
                        .HasMaxLength(500);

                    b.Property<long>("StudentID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("StudentImmunization");
                });

            modelBuilder.Entity("DayCare.Entity.Student.StudentMedication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentMedicationID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<long>("DosageQuantityID");

                    b.Property<long>("DoseRepeatID");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("HowTaken")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MedicationName")
                        .HasMaxLength(500);

                    b.Property<string>("OtherMedication")
                        .HasMaxLength(500);

                    b.Property<DateTime>("StartDate");

                    b.Property<long>("StudentID");

                    b.Property<long>("Units");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.Property<bool>("isParentAcknowledge");

                    b.Property<bool>("isTeacherAcknowledge");

                    b.Property<string>("strength")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("StudentMedication");
                });

            modelBuilder.Entity("DayCare.Entity.Student.StudentOtherActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StudentOtherActivityID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<DateTime>("EndTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("OtherActivityNote")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("StartTime");

                    b.Property<long>("StudentActivitiesID");

                    b.Property<long>("SubActivityTypeID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("StudentOtherActivity");
                });

            modelBuilder.Entity("DayCare.Entity.Teachers.TeacherAvailability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TeacherAvailabilityID");

                    b.Property<long>("AgencyID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("DisableOnLeave")
                        .HasMaxLength(100);

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("OnLeave");

                    b.Property<string>("OnLeaveComment")
                        .HasMaxLength(100);

                    b.Property<long>("ReasonId");

                    b.Property<DateTime>("StartDate");

                    b.Property<long>("TeacherID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("TeacherAvailability");
                });

            modelBuilder.Entity("DayCare.Entity.Teachers.TeacherBreakLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TeacherBreakLogID");

                    b.Property<long>("AgencyID");

                    b.Property<DateTime>("BreakIn");

                    b.Property<DateTime>("BreakOut");

                    b.Property<string>("BreakReason")
                        .HasMaxLength(1000);

                    b.Property<long>("BreakStatusID");

                    b.Property<long>("BreakTypesID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("TeacherDailyAttendenceID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("TeacherBreakLog");
                });

            modelBuilder.Entity("DayCare.Entity.Teachers.TeacherClassAttendence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TeacherClassAttendenceID");

                    b.Property<long>("AgencyID");

                    b.Property<DateTime>("CheckInTime");

                    b.Property<DateTime>("CheckOutTime");

                    b.Property<long>("CheckStatus");

                    b.Property<long>("ClassAssignmentLogID");

                    b.Property<long>("ClassesID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("TeacherDailyAttendenceID");

                    b.Property<long>("TeacherID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("TeacherClassAttendence");
                });

            modelBuilder.Entity("DayCare.Entity.Teachers.TeacherDailyAttendence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TeacherDailyAttendenceID");

                    b.Property<long>("AgencyID");

                    b.Property<DateTime>("AttendanceDate");

                    b.Property<long>("AttendenceStatusID");

                    b.Property<DateTime>("ClockIn");

                    b.Property<DateTime>("ClockOut");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("DisableOnLeave")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("OnLeave");

                    b.Property<string>("OnLeaveComment")
                        .HasMaxLength(100);

                    b.Property<long>("ReasonId");

                    b.Property<string>("TeacherAttendenceStatusName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("TeacherID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("TeacherDailyAttendence");
                });

            modelBuilder.Entity("DayCare.Entity.Teachers.TeacherInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TeacherID");

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<long>("AgencyID");

                    b.Property<string>("Certification")
                        .HasMaxLength(100);

                    b.Property<long>("CityId");

                    b.Property<long>("CountryId");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<DateTime>("DateHired");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<long>("GenderID");

                    b.Property<decimal>("GrossPayPerHour");

                    b.Property<long>("HomePhone");

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<string>("MHomePhone");

                    b.Property<string>("MPhoneNumber");

                    b.Property<long>("PhoneNumber");

                    b.Property<long>("PositionTypeID");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(100);

                    b.Property<long>("StateId");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("TeacherStatusID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.Property<long>("UserID");

                    b.HasKey("Id");

                    b.ToTable("TeacherInfo");
                });

            modelBuilder.Entity("DayCare.Entity.User.UserLoginDevice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateAdded");

                    b.Property<int>("DeviceCount");

                    b.Property<string>("DeviceId");

                    b.Property<string>("DeviceModel");

                    b.Property<string>("DeviceToken");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("LastUsed");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<int>("OSType");

                    b.Property<string>("OperatingSystemVersion");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserLoginDevice");
                });

            modelBuilder.Entity("DayCare.Entity.User.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleID");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.HasKey("Id");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("DayCare.Entity.User.Users", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserID");

                    b.Property<long>("AccessFailedCount");

                    b.Property<long>("AgencyID");

                    b.Property<DateTime?>("BlockDateTime");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CreatedFromIP");

                    b.Property<long?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedFromIP");

                    b.Property<long>("DeviceID");

                    b.Property<string>("DeviceToken");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FirstName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsBlock");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLoggedIn");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("PhoneNumber");

                    b.Property<long>("PhoneTypeID");

                    b.Property<string>("QuickPin");

                    b.Property<long>("RoleId");

                    b.Property<string>("Timezone");

                    b.Property<string>("Token")
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedFromIP");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long>("loggedInStatusID");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DayCare.Entity.Masters.AccountLedger", b =>
                {
                    b.HasOne("DayCare.Entity.Masters.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DayCare.Entity.Agency.PayementDetails", "PayementDetails")
                        .WithMany()
                        .HasForeignKey("PaymentDetailsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DayCare.Entity.Masters.AdvanceFeePaymentDetails", b =>
                {
                    b.HasOne("DayCare.Entity.Masters.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DayCare.Entity.Masters.TransactionDetails", "TransactionDetails")
                        .WithMany()
                        .HasForeignKey("InvoiceDetailsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DayCare.Entity.Masters.CalculatedFeeDetails", b =>
                {
                    b.HasOne("DayCare.Entity.Masters.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DayCare.Entity.Masters.CalculatedFees", "CalculatedFees")
                        .WithMany()
                        .HasForeignKey("PerDayFeeCalculationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DayCare.Entity.Masters.CalculatedFees", b =>
                {
                    b.HasOne("DayCare.Entity.Masters.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DayCare.Entity.Masters.DigitalDirectorMaster", b =>
                {
                    b.HasOne("DayCare.Entity.Masters.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DayCare.Entity.Masters.ExtraFeeChargeMaster", b =>
                {
                    b.HasOne("DayCare.Entity.Masters.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DayCare.Entity.Masters.ExtraFeesDetails", b =>
                {
                    b.HasOne("DayCare.Entity.Masters.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DayCare.Entity.Masters.CalculatedFees", "calculatedFees")
                        .WithMany()
                        .HasForeignKey("CalculatedFeesID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DayCare.Entity.Masters.ExtraFeeChargeMaster", "ExtraFeeChargeMaster")
                        .WithMany()
                        .HasForeignKey("ExtraFeeChargeMasterID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DayCare.Entity.Masters.PerDayFeeCalculation", b =>
                {
                    b.HasOne("DayCare.Entity.Masters.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DayCare.Entity.Masters.StudentFeesDiscount", b =>
                {
                    b.HasOne("DayCare.Entity.Masters.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DayCare.Entity.Masters.TransactionDetails", b =>
                {
                    b.HasOne("DayCare.Entity.Masters.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DayCare.Entity.Masters.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DayCare.Entity.Masters.TransactionMaster", b =>
                {
                    b.HasOne("DayCare.Entity.Masters.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DayCare.Entity.Masters.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
